version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autism-center-postgres
    environment:
      POSTGRES_DB: AutismCenter
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration.sql:/docker-entrypoint-initdb.d/migration.sql
    ports:
      - "5432:5432"
    networks:
      - autism-center-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: autism-center-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - autism-center-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: autism-center-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=AutismCenter;Username=postgres;Password=${POSTGRES_PASSWORD};Pooling=true;MinPoolSize=5;MaxPoolSize=100
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - JwtSettings__Issuer=AutismCenter
      - JwtSettings__Audience=AutismCenter-Users
      - StripeSettings__SecretKey=${STRIPE_SECRET_KEY}
      - StripeSettings__PublishableKey=${STRIPE_PUBLISHABLE_KEY}
      - StripeSettings__WebhookSecret=${STRIPE_WEBHOOK_SECRET}
      - EmailSettings__SendGridApiKey=${SENDGRID_API_KEY}
      - EmailSettings__FromEmail=${FROM_EMAIL}
      - AwsSettings__AccessKey=${AWS_ACCESS_KEY}
      - AwsSettings__SecretKey=${AWS_SECRET_KEY}
      - AwsSettings__Region=${AWS_REGION}
      - AwsSettings__S3BucketName=${AWS_S3_BUCKET}
      - GoogleSettings__ClientId=${GOOGLE_CLIENT_ID}
      - GoogleSettings__ClientSecret=${GOOGLE_CLIENT_SECRET}
      - ZoomSettings__ApiKey=${ZOOM_API_KEY}
      - ZoomSettings__ApiSecret=${ZOOM_API_SECRET}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autism-center-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend (Nginx serving React build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: autism-center-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - autism-center-network
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: autism-center-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autism-center-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: autism-center-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - autism-center-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  autism-center-network:
    driver: bridge